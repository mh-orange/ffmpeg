// Code generated by "enumer -type=ColorRange -json=true -transform=comment"; DO NOT EDIT.

package ffmpeg

import (
	"encoding/json"
	"fmt"
)

const _ColorRangeName = "unknowntvpc"

var _ColorRangeIndex = [...]uint8{0, 7, 9, 11}

func (i ColorRange) String() string {
	if i < 0 || i >= ColorRange(len(_ColorRangeIndex)-1) {
		return fmt.Sprintf("ColorRange(%d)", i)
	}
	return _ColorRangeName[_ColorRangeIndex[i]:_ColorRangeIndex[i+1]]
}

var _ColorRangeValues = []ColorRange{0, 1, 2}

var _ColorRangeNameToValueMap = map[string]ColorRange{
	_ColorRangeName[0:7]:  0,
	_ColorRangeName[7:9]:  1,
	_ColorRangeName[9:11]: 2,
}

// ColorRangeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorRangeString(s string) (ColorRange, error) {
	if val, ok := _ColorRangeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ColorRange values", s)
}

// ColorRangeValues returns all values of the enum
func ColorRangeValues() []ColorRange {
	return _ColorRangeValues
}

// IsAColorRange returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ColorRange) IsAColorRange() bool {
	for _, v := range _ColorRangeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ColorRange
func (i ColorRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ColorRange
func (i *ColorRange) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ColorRange should be a string, got %s", data)
	}

	var err error
	*i, err = ColorRangeString(s)
	return err
}
