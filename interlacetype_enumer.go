// Code generated by "enumer -type=InterlaceType -json=true -transform=comment"; DO NOT EDIT.

package vtil

import (
	"encoding/json"
	"fmt"
)

const _InterlaceTypeName = "unknowntelecineinterlacedinterlaced TFFinterlaced BFFprogressive"

var _InterlaceTypeIndex = [...]uint8{0, 7, 15, 25, 39, 53, 64}

func (i InterlaceType) String() string {
	if i < 0 || i >= InterlaceType(len(_InterlaceTypeIndex)-1) {
		return fmt.Sprintf("InterlaceType(%d)", i)
	}
	return _InterlaceTypeName[_InterlaceTypeIndex[i]:_InterlaceTypeIndex[i+1]]
}

var _InterlaceTypeValues = []InterlaceType{0, 1, 2, 3, 4, 5}

var _InterlaceTypeNameToValueMap = map[string]InterlaceType{
	_InterlaceTypeName[0:7]:   0,
	_InterlaceTypeName[7:15]:  1,
	_InterlaceTypeName[15:25]: 2,
	_InterlaceTypeName[25:39]: 3,
	_InterlaceTypeName[39:53]: 4,
	_InterlaceTypeName[53:64]: 5,
}

// InterlaceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InterlaceTypeString(s string) (InterlaceType, error) {
	if val, ok := _InterlaceTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InterlaceType values", s)
}

// InterlaceTypeValues returns all values of the enum
func InterlaceTypeValues() []InterlaceType {
	return _InterlaceTypeValues
}

// IsAInterlaceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InterlaceType) IsAInterlaceType() bool {
	for _, v := range _InterlaceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for InterlaceType
func (i InterlaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for InterlaceType
func (i *InterlaceType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("InterlaceType should be a string, got %s", data)
	}

	var err error
	*i, err = InterlaceTypeString(s)
	return err
}
