// Code generated by "enumer -type=ColorSpace -json=true -transform=comment"; DO NOT EDIT.

package vtil

import (
	"encoding/json"
	"fmt"
)

const _ColorSpaceName = "gbrbt709unknownreservedfccbt470bgsmpte170msmpte240mycgcobt2020ncbt2020csmpte2085chroma-derived-ncchroma-derived-cictcp"

var _ColorSpaceIndex = [...]uint8{0, 3, 8, 15, 23, 26, 33, 42, 51, 56, 64, 71, 80, 97, 113, 118}

func (i ColorSpace) String() string {
	if i < 0 || i >= ColorSpace(len(_ColorSpaceIndex)-1) {
		return fmt.Sprintf("ColorSpace(%d)", i)
	}
	return _ColorSpaceName[_ColorSpaceIndex[i]:_ColorSpaceIndex[i+1]]
}

var _ColorSpaceValues = []ColorSpace{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

var _ColorSpaceNameToValueMap = map[string]ColorSpace{
	_ColorSpaceName[0:3]:     0,
	_ColorSpaceName[3:8]:     1,
	_ColorSpaceName[8:15]:    2,
	_ColorSpaceName[15:23]:   3,
	_ColorSpaceName[23:26]:   4,
	_ColorSpaceName[26:33]:   5,
	_ColorSpaceName[33:42]:   6,
	_ColorSpaceName[42:51]:   7,
	_ColorSpaceName[51:56]:   8,
	_ColorSpaceName[56:64]:   9,
	_ColorSpaceName[64:71]:   10,
	_ColorSpaceName[71:80]:   11,
	_ColorSpaceName[80:97]:   12,
	_ColorSpaceName[97:113]:  13,
	_ColorSpaceName[113:118]: 14,
}

// ColorSpaceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorSpaceString(s string) (ColorSpace, error) {
	if val, ok := _ColorSpaceNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ColorSpace values", s)
}

// ColorSpaceValues returns all values of the enum
func ColorSpaceValues() []ColorSpace {
	return _ColorSpaceValues
}

// IsAColorSpace returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ColorSpace) IsAColorSpace() bool {
	for _, v := range _ColorSpaceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ColorSpace
func (i ColorSpace) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ColorSpace
func (i *ColorSpace) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ColorSpace should be a string, got %s", data)
	}

	var err error
	*i, err = ColorSpaceString(s)
	return err
}
